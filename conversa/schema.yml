openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/docs/schema:
    get:
      operationId: docs_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - docs
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/messages/:
    get:
      operationId: messages_list
      parameters:
      - in: query
        name: channel_id
        schema:
          type: string
        description: ID of the channel
      tags:
      - messages
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/server/category/:
    get:
      operationId: server_category_list
      tags:
      - server
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/server/create/:
    post:
      operationId: server_create_create
      description: |-
        Create a new server.

        **Args:**
            request (Request): The HTTP request object containing the server data.

        **Returns:**
            Response: A JSON response containing the created server data or validation errors.

        **Raises:**
            N/A

        **Example:**
            The following example demonstrates how to create a new server using a POST request:

            ```bash
            POST /api/server/create
            {
                "name": "My Server",
                "category": "Gaming",
                "description": "A gaming community server",
                "members": ["user1", "user2"],
                "banner": upload image,
                "icon": upload icon,
            }
            ```

        Note:
            This method uses the ServerSerializer for data validation and saving. If the provided data is
            valid, the server is saved, and a response with the server data and HTTP status 201 Created is returned.
            If there are validation errors, a response with the errors and HTTP status 400 Bad Request is returned.
      parameters:
      - in: query
        name: banner
        schema:
          type: string
          format: binary
        description: Server banner image file
      - in: query
        name: category
        schema:
          type: string
        description: name of the server category
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Description of the server
      - in: query
        name: icon
        schema:
          type: string
          format: binary
        description: Server icon image file
      - in: query
        name: members
        schema:
          type: array
          items:
            type: string
        description: List of member usernames
      - in: query
        name: name
        schema:
          type: string
        description: Name of the server
        required: true
      - in: query
        name: owner
        schema:
          type: integer
        description: ID of the server owner (User)
        required: true
      tags:
      - server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Server'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Server'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Server'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
          description: ''
  /api/server/select/:
    get:
      operationId: server_select_list
      description: |-
        List all servers, or filter the list by category, user, quantity, or server ID.

        **Request Parameters:**

        * `category`: The name of the server category to filter by.
        * `quantity`: The number of servers to return.
        * `by_user`: Whether to filter the list to only servers that the current user is a member of.
        * `by_serverId`: Whether to filter the list to only the server with the specified ID.
        * `with_num_members`: Whether to annotate the response with the number of members of each server.

        **Returns:**

        A Response object containing a list of servers, serialized in JSON. Each server object will include the following fields:

        * `id`: The server ID.
        * `name`: The server name.
        * `category`: The server category.
        * `description`: The server description.
        * `member_count`: The number of members of the server (if `with_num_members` is specified).

        **Raises:**

        * AuthenticationFailed: If the user is not logged in and attempts to access servers by user or by server ID.
        * ValidationError: If the `category`, `quantity`, or `serverId` parameter is invalid.

        **Examples:**

        * List all servers:

            ```
            GET /servers
            ```

        * List servers in the "Gaming" category:

            ```
            GET /servers?category=Gaming
            ```

        * List the top 10 servers by number of members:

            ```
            GET /servers?with_num_members=true&quantity=10&by_num_members=desc
            ```

        * Get the server with ID 12345:

            ```
            GET /servers?by_serverId=12345
            ```

        * List all servers that the current user is a member of:

            ```
            GET /servers?by_user=true
            ```
      parameters:
      - in: query
        name: by_serverId
        schema:
          type: integer
        description: include server by id
      - in: query
        name: by_user
        schema:
          type: boolean
        description: filter servers by the current authenticated user (true/false)
      - in: query
        name: category
        schema:
          type: string
        description: category of servers to retrieve
      - in: query
        name: quantity
        schema:
          type: integer
        description: Number of servers to retrieve
      - in: query
        name: with_num_members
        schema:
          type: boolean
        description: include number of members for each server
      tags:
      - server
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        icon:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - name
    Channel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        topic:
          type: string
          maxLength: 100
        owner:
          type: integer
        server:
          type: integer
      required:
      - id
      - name
      - owner
      - server
      - topic
    Message:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sender:
          type: integer
        content:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - id
      - sender
      - timestamp
    Server:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        num_members:
          type: integer
          readOnly: true
        channel_server:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
          maxLength: 250
        banner:
          type: string
          format: uri
          nullable: true
        icon:
          type: string
          format: uri
          nullable: true
        owner:
          type: integer
        category:
          type: integer
      required:
      - category
      - channel_server
      - id
      - name
      - num_members
      - owner
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
